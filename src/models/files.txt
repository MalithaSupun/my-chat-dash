import { useState } from "react";
import Searchbar from "../components/Searchbar";
import AdminList from "../components/AdminList";
import Chat from "../components/Chat";
import NewChatButton from "../components/NewChatButtion"; // Corrected the typo here
import { users } from "../constants/usersData"; // Import the users data here

function WrenConnect() {
  const [activeId, setActiveId] = useState(null);
  const [activeType, setActiveType] = useState(null); // 'group' or 'user'

  // State to manage groups
  const [groups, setGroups] = useState([]); // Initialize groups state

  return (
    <div className="flex h-full bg-gray-50">
      <div className="bg-white p-4 overflow-y-auto">
        <div className="flex justify-between items-center">
          <div className="flex-grow mr-5">
            <Searchbar />
          </div>
          <div>
            {/* Pass activeId, setter, and groups to NewChatButton */}
            <NewChatButton
              activeId={activeId}
              setActiveId={setActiveId}
              setActiveType={setActiveType}
              users={users} // Pass the users data here
              groups={groups} // Pass groups data
              setGroups={setGroups} // Pass the function to update groups
            />
          </div>
        </div>
        {/* Pass the users and groups data as props */}
        <AdminList
          activeId={activeId}
          setActiveId={setActiveId}
          activeType={activeType}
          setActiveType={setActiveType}
          users={users} // Pass users data
          groups={groups} // Pass groups data
        />
      </div>
      <div className="w-4/5 flex-1 h-full px-9 bg-white">
        <Chat activeId={activeId} activeType={activeType} />
      </div>
    </div>
  );
}

export default WrenConnect;


import { FaCheck, FaCheckDouble } from "react-icons/fa"; // Single and double check icons

const ListItem = ({ item, isActive, onClick }) => {
  // Helper function to render the appropriate icon based on status
  const renderStatusIcon = (status) => {
    switch (status) {
      case "read":
        return <FaCheckDouble className="text-green-500" />; // Read: green double checkmarks
      case "delivered":
      case "unread": // Combine delivered and unread
        return <FaCheckDouble className="text-black" />; // Delivered and unread: black double checkmarks
      case "not delivered":
        return <FaCheck className="text-black" />; // Not delivered: single black checkmark
      default:
        return null; // No icon if no status
    }
  };

  return (
    <div
      onClick={onClick}
      className={`flex items-center justify-between p-4 border-b cursor-pointer ${
        isActive ? "bg-blue-100" : ""
      }`}
    >
      <div className="flex items-center space-x-4">
        {/* Item image (either group or user) */}
        <img
          src={item.img}
          alt={item.name}
          className="w-10 h-10 rounded-full"
        />
        <div>
          {/* Item name and last message */}
          <p className="font-bold">{item.name}</p>
          <p className="text-sm text-gray-500">{item.message}</p>
        </div>
      </div>
      <div className="flex flex-col items-end space-y-1">
        {/* Time */}
        <p className="text-sm text-gray-400">{item.time}</p>
        <div className="flex items-center space-x-2">
          {/* Render status icon based on the status */}
          {renderStatusIcon(item.status)}
          {/* Notification badge if unread messages */}
          {item.notification > 0 && (
            <span className="text-xs text-white bg-red-500 px-2 py-1 rounded-full">
              {item.notification}
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

const AdminList = ({ activeId, setActiveId, activeType, setActiveType, users, groups }) => {
  const handleGroupClick = (groupId) => {
    setActiveId(groupId);
    setActiveType("group");
    // Clear notification for the selected group
    const groupIndex = groups.findIndex((group) => group.groupId === groupId);
    if (groupIndex !== -1) {
      groups[groupIndex].notification = 0;
    }
  };

  const handleUserClick = (userId) => {
    setActiveId(userId);
    setActiveType("user");
    // Clear notification for the selected user
    const userIndex = users.findIndex((user) => user.userId === userId);
    if (userIndex !== -1) {
      users[userIndex].notification = 0;
    }
  };

  // Ensure all users with chat data are included
  const usersWithChatData = users
    .filter((user) => user.chatData && user.chatData.length > 0)
    .map((user) => {
      const lastChat = user.chatData[user.chatData.length - 1]; // Get the last message in chatData
      return {
        ...user,
        message: lastChat.message, // Use the last chat message
      };
    });

  // Ensure all groups are included, even those without chat data
  const groupsWithFallbackChatData = groups.map((group) => {
    const lastChat = group.chatData?.[group.chatData.length - 1] || {}; // Fallback to an empty object if no chat data
    return {
      ...group,
      message: lastChat.message || "No messages yet", // Fallback to a default message
    };
  });

  return (
    <>
      {/* Section for Groups */}
      <div className="bg-white p-4 rounded-lg shadow-md mb-6 border-t mt-3">
        <h2 className="text-lg font-bold pb-4">Groups</h2>
        <div>
          {groupsWithFallbackChatData.map((group) => (
            <ListItem
              key={group.groupId}
              item={group}
              isActive={activeType === "group" && activeId === group.groupId}
              onClick={() => handleGroupClick(group.groupId)}
            />
          ))}
        </div>
      </div>
      {/* Section for Analysts */}
      <div className="bg-white p-4 rounded-lg shadow-md border-t mt-3">
        <h2 className="text-lg font-bold pb-4">Analysts</h2>
        <div>
          {usersWithChatData.map((user) => (
            <ListItem
              key={user.userId}
              item={user}
              isActive={activeType === "user" && activeId === user.userId}
              onClick={() => handleUserClick(user.userId)}
            />
          ))}
        </div>
      </div>
    </>
  );
};

export default AdminList;

import React, { useState } from "react";
import { FaPlus, FaTimes } from "react-icons/fa";
import { FaPaperPlane } from "react-icons/fa";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const NewChatButton = ({ activeId, setActiveId, setActiveType, users, groups, setGroups }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedUsers, setSelectedUsers] = useState([]);
  const [groupName, setGroupName] = useState("");
  const [groupPhoto, setGroupPhoto] = useState(null);
  const [isGroupMode, setIsGroupMode] = useState(false); // To toggle between individual and group chat modes

  // Toggle modal visibility
  const toggleModal = () => {
    setIsModalOpen(!isModalOpen);
    setIsGroupMode(false); // Reset to individual chat mode when modal is toggled
  };

  // Handle selecting a user for a new chat
  const handleSelectUser  = (userId) => {
    setActiveId(userId); // Set the selected user as active
    setActiveType("user");
    toggleModal(); // Close modal after selection
  };

  // Handle selecting users for a group
  const handleToggleUserSelect = (userId) => {
    if (selectedUsers.includes(userId)) {
      setSelectedUsers(selectedUsers.filter((id) => id !== userId));
    } else {
      setSelectedUsers([...selectedUsers, userId]);
    }
  };

const handleCreateGroup = () => {
  if (groupName.trim() === "" || selectedUsers.length < 2) {
    toast.error("Group name and at least two users are required!");
    return;
  }

  // Find the highest existing groupId and increment it for the new group
  const maxGroupId = groups.length > 0 
    ? Math.max(...groups.map(group => group.groupId)) 
    : 0;
  const newGroupId = maxGroupId + 1;

  const newGroup = {
    groupId: newGroupId,
    name: groupName,
    notification: 0,
    img: groupPhoto,
    members: selectedUsers // Store selected users as members
  };

  // Log the created group
  console.log("Group Created:", newGroup);

  // Update the chat list by creating a new array
  setGroups(prevGroups => [...prevGroups, newGroup]);

  // Reset fields after creating the group
  setGroupName("");
  setGroupPhoto(null);
  setSelectedUsers([]);
  toggleModal();
};


  const filteredUsers = users.filter((user) =>
    user.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <>
      <button
        className="flex items-center text-gray-600 text-sm p-2 bg-gray-200 hover:bg-slate-300 rounded-full cursor-pointer mt-2"
        onClick={toggleModal}
      >
        <FaPlus className="mr-1" />
        New Chat
      </button>

      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-96 relative">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold">
                {isGroupMode ? "Create a Group" : "Start a New Chat"}
              </h2>
              <button onClick={toggleModal} className="text-gray-600 text-xl">
                <FaTimes />
              </button>
            </div>

            <div className="flex justify-between mb-4 ">
              <button
                className={`p-2 w-1/2 ${
                  !isGroupMode ? "bg-blue-400" : "bg-slate-200"
                } rounded-l-lg`}
                onClick={() => setIsGroupMode(false)}
              >
                Individual Chat
              </button>
              <button
                className={`p-2 w-1/2 ${
                  isGroupMode ? "bg-blue-400" : "bg-slate-200"
                } rounded-r-lg`}
                onClick={() => setIsGroupMode(true)}
              >
                Create Group
              </button>
            </div>

            {isGroupMode ? (
              // Group chat creation section
              <>
                <input
                  type="text"
                  placeholder="Group Name"
                  className="w-full p-2 border rounded-lg mb-4"
                  value={groupName}
                  onChange={(e) => setGroupName(e.target.value)}
                />

                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) =>
                    setGroupPhoto(URL.createObjectURL(e.target.files[0]))
                  }
                  className="w-full p-2 mb-4"
                />

                {groupPhoto && (
                  <img
                    src={groupPhoto}
                    alt="Group"
                    className="w-20 h-20 rounded-full mb-4"
                  />
                )}

                <input
                  type="text"
                  placeholder="Search users..."
                  className="w-full p-2 border rounded-lg mb-4"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />

                <div className="max-h-72 overflow-y-auto">
                  {filteredUsers.length > 0 ? (
                    filteredUsers.map((user) => (
                      <div
                        key={user.userId}
                        className="p-2 border-b cursor-pointer hover:bg-gray-100 rounded"
                        onClick={() => handleToggleUserSelect(user.userId)}
                      >
                        <div className="flex items-center space-x-3">
                          <input
                            type="checkbox"
                            checked={selectedUsers.includes(user.userId)}
                            onChange={() => handleToggleUserSelect(user.userId)}
                          />
                          <img
                            src={user.img}
                            alt={user.name}
                            className="w-10 h-10 rounded-full"
                          />
                          <div>
                            <p className="font-bold">{user.name}</p>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <p>No users found</p>
                  )}
                </div>

                <button
                  className="bg-blue-500 text-white w-full p-2 mt-4 rounded-lg"
                  onClick={handleCreateGroup}
                >
                  Create Group
                </button>
              </>
            ) : (
              // Individual chat section
              <>
                <input
                  type="text"
                  placeholder="Search users..."
                  className="w-full p-2 border rounded-lg mb-4"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />

                <div className="max-h-72 overflow-y-auto">
                  {filteredUsers.length > 0 ? (
                    filteredUsers.map((user) => (
                      <div
                        key={user.userId}
                        className="p-2 border-b cursor-pointer hover:bg-gray-100 rounded"
                        onClick={() => handleSelectUser(user.userId)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <img
                              src={user.img}
                              alt={user.name}
                              className="w-10 h-10 rounded-full"
                            />
                            <div>
                              <p className="font-bold">{user.name}</p>
                            </div>
                          </div>
                          {/* Icon aligned to the right */}
                          <FaPaperPlane size={20} color="blue" />
                        </div>
                      </div>
                    ))
                  ) : (
                    <p>No users found</p>
                  )}
                </div>
              </>
            )}
          </div>
        </div>
      )}
      <ToastContainer />
    </>
  );
};

export default NewChatButton;